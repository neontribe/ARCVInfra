# Playbook to deploy a new instance
- hosts: skunk
  tasks:
    - name: Update apt
      become: true
      apt: update_cache=yes cache_valid_time=3600 force=yes

    - name: Specify MySQL root password before installing
      become: true
      debconf:
        name: "mysql-server"
        question: "mysql-server/{{ item }}"
        value: "{{ mysql_root_pass| quote }}"
        vtype: "password"
      with_items:
        - root_password
        - root_password_again

    - name: Install packages
      become: true
      apt:
        pkg: "{{ item }}"
        state: latest
      with_items:
        - apache2
        - git
        - git
        - libapache2-mod-php
        - mysql-client
        - mysql-server
        - php-cli
        - php-json-schema
        - php-mbstring
        - php7.2
        - php7.2-bcmath
        - php7.2-curl
        - php7.2-gd
        - php7.2-intl
        - php7.2-json
        - php7.2-mbstring
        - php7.2-mysql
        - php7.2-opcache
        - php7.2-readline
        - php7.2-sqlite3
        - php7.2-xml
        - php7.2-xmlrpc
        - php7.2-zip
        - python-mysqldb
        - unzip

    - shell: hostname
      register: current_hostname

    - name: Update root password for all root accounts
      mysql_user:
        name: root
        host: "{{ item }}"
        password: "{{ mysql_root_pass }}"
        login_user: root
        login_password: "{{ mysql_root_pass }}"
        check_implicit_admin: yes
        priv: "*.*:ALL,GRANT"
      with_items:
        - "{{ current_hostname.stdout | lower }}"
        - 127.0.0.1
        - ::1
        - localhost

    - name: Create databases
      mysql_db:
        name: "{{ arc_mysql_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_pass }}"

    - name: Ensure anonymous users are not in the database
      mysql_user:
        name: ''
        host: "{{ item }}"
        state: absent
        login_user: root
        login_password: "{{ mysql_root_pass }}"
      with_items:
        - localhost
        - "{{ current_hostname.stdout | lower }}"

    - name: Create users
      mysql_user:
        name: "{{ arc_mysql_user }}"
        password: "{{ arc_mysql_pass }}"
        priv: "{{ arc_mysql_name }}.*:ALL"
        state: present 
        login_user: root
        login_password: "{{ mysql_root_pass }}"

    - name: Ensure target dir
      become: true
      file:
        path: /var/www/arc
        state: directory
        mode: 0775
        owner: "{{ ansible_ssh_user }}"

    - name: Get archive
      get_url:
        url: "https://github.com/neontribe/ARCVService/archive/{{ arc_version }}.zip"
        dest: /var/tmp/arc.zip

    - name: Unpack the codebase
      unarchive:
        src: /var/tmp/arc.zip
        dest: /var/www/arc
        remote_src: true

    - name: Check for composer bin
      stat: "path=/usr/loca/bin/composer"
      register: composer

    - name: Get Composer MD5
      uri:
        url: https://composer.github.io/installer.sig
        return_content: true
      register: composer_signature
      when: not composer.stat.exists
    
    - name: Download composer installer.
      get_url:
        url: https://getcomposer.org/installer
        dest: /var/tmp/composer-installer.php
        mode: 0755
        checksum: "sha384:{{ composer_signature.content }}"
      when: not composer.stat.exists

    - name: Install composer
      shell: php composer-installer.php
      args:
        chdir: /var/tmp
      when: not composer.stat.exists
    
    - name: Link composer into path
      become: true
      shell: mv /var/tmp/composer.phar /usr/local/bin/composer
      when: not composer.stat.exists

    - name: Set app dir fact
      set_fact:
        app_dir: "/var/www/arc/ARCVService-{{ arc_version[1:] }}"

    - name: Run composer
      shell: composer install
      args:
        chdir: "{{ app_dir }}"
      tags:
        - post

    # Copy .env.example to .env and edit to local settings
    - name: Copy in the env file
      copy:
        src: backups/{{ arc_source }}/env
        dest: "{{ app_dir }}/.env"
      tags:
        - post

    # Update .env to match new settings
    - name: Fix DB_DATABASE
      lineinfile:
        path: "{{ app_dir }}/.env"
        regexp: '^DB_DATABASE='
        line: "DB_DATABASE={{ arc_mysql_name }}"

    - name: DB_USERNAME
      lineinfile:
        path: "{{ app_dir }}/.env"
        regexp: '^DB_USERNAME='
        line: "DB_USERNAME={{ arc_mysql_user }}"

    - name: DB_PASSWORD
      lineinfile:
        path: "{{ app_dir }}/.env"
        regexp: '^DB_PASSWORD='
        line: "DB_PASSWORD={{ arc_mysql_pass }}"


    # If not using Homestead or Valet - you will need to configure permissions on storage and bootstrap/cache. See Laravel 5.4 Installation for more info.
    # import mysql
    # install apache config, update the vhosts to match the target virtual host names
    # install certbot and create a certificate
    # set apapche and mysql to auto start
    # start apache and mysql
